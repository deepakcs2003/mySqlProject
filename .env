JWT_TOKEN="ajbdjasbdjasbdjasdbjadb"

create database db;
use db;
create table user ( id int);
create table SignUpTable(
id INT AUTO_INCREMENT PRIMARY KEY,
name varchar(255),
pass varchar(255),
email varchar(255)
);
ALTER TABLE SignUpTable
ADD role ENUM('admin', 'student') NOT NULL DEFAULT 'student';

DESCRIBE SignUpTable;
SELECT * FROM SignUpTable;

npm run dev
npm start
npx create-react-app


# 1. Login to MySQL
# Use this command to log in to MySQL as the root user. You'll be prompted to enter your password.
mysql -u root -p

# 2. Show Databases
# This command lists all the databases available in the MySQL server.
SHOW DATABASES;

# 3. Create a Database
# Creates a new database with the specified name.
CREATE DATABASE database_name;

# 4. Use a Database
# Switches to a specific database to begin working with it.
USE database_name;

# 5. Show Tables
# Lists all the tables in the current database.
SHOW TABLES;

# 6. Create a Table
# Creates a new table with specified columns and their data types.
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    column3 datatype
);

# 7. Show Table Structure
# Displays the structure of a specified table (columns, data types, etc.).
DESCRIBE table_name;

# 8. Insert Data into a Table
# Inserts a row of data into a table.
INSERT INTO table_name (column1, column2, column3)
VALUES ('value1', 'value2', 'value3');

# 9. Select Data from a Table
# Selects and displays all data from a table.
SELECT * FROM table_name;

# 10. Select Specific Columns from a Table
# Selects and displays specific columns from a table.
SELECT column1, column2 FROM table_name;

# 11. Filter Data with a Condition
# Selects rows based on a condition.
SELECT * FROM table_name WHERE column1 = 'value';

# 12. Update Data in a Table
# Updates data in a table where a specific condition is met.
UPDATE table_name
SET column1 = 'new_value', column2 = 'new_value'
WHERE condition;

# 13. Delete Specific Rows from a Table
# Deletes rows that meet the specified condition.
DELETE FROM table_name WHERE condition;

# 14. Delete All Rows from a Table
# Deletes all rows from the specified table (does not remove the table itself).
DELETE FROM table_name;

# 15. Drop a Table (Delete Table)
# Deletes a table entirely from the database.
DROP TABLE table_name;

# 16. Drop a Database (Delete Database)
# Deletes a database entirely from the server.
DROP DATABASE database_name;

# 17. Create a User
# Creates a new user with a specified username and password.
CREATE USER 'username'@'host' IDENTIFIED BY 'password';

# 18. Grant Permissions to a User
# Grants all privileges (permissions) to a user on a specific database.
GRANT ALL PRIVILEGES ON database_name.* TO 'username'@'host';

# 19. Grant Specific Permissions to a User
# Grants specific permissions (e.g., SELECT, INSERT, UPDATE) to a user.
GRANT SELECT, INSERT, UPDATE ON database_name.* TO 'username'@'host';

# 20. Flush Privileges (Reload Privileges)
# Reloads the privileges, ensuring that changes made to users or permissions are applied.
FLUSH PRIVILEGES;

# 21. Show User Privileges
# Displays the permissions and privileges granted to a specific user.
SHOW GRANTS FOR 'username'@'host';

# 22. Change User Password
# Changes the password for a specific user.
ALTER USER 'username'@'host' IDENTIFIED BY 'new_password';

# 23. Drop a User (Delete User)
# Deletes a user from the MySQL server.
DROP USER 'username'@'host';

# 24. Show Running Processes
# Displays a list of currently running MySQL processes and queries.
SHOW PROCESSLIST;

# 25. Exit MySQL
# Exits the MySQL command line client.
EXIT;

# 26. Backup a Database (Command Line)
# Backs up the database to a .sql file, which can be used to restore it later.
mysqldump -u root -p database_name > backup.sql

# 27. Restore a Database from Backup
# Restores a database from a .sql backup file.
mysql -u root -p database_name < backup.sql

# 28. Show MySQL Version
# Displays the version of the MySQL server.
SELECT VERSION();

# 29. Check a Table for Errors
# Checks for errors in a table structure.
CHECK TABLE table_name;

# 30. Repair a Table
# Repairs a table if it's corrupted or has issues.
REPAIR TABLE table_name;


import React, { useState } from 'react';

const SignupForm = () => {
  // useState to store form data
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: ''
  });

  // Handle input change
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevData => ({
      ...prevData,
      [name]: value
    }));
  };

  // Handle form submission
  const handleSubmit = (e) => {
    e.preventDefault();
    // Here you can handle further actions like sending the data to the backend
    console.log('Form Data Submitted:', formData);
  };

  return (
    <div>
      <h2>Signup Form</h2>
      <form onSubmit={handleSubmit}>
        <div>
          <label htmlFor="name">Name:</label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name}
            onChange={handleChange}
            required
          />
        </div>

        <div>
          <label htmlFor="email">Email:</label>
          <input
            type="email"
            id="email"
            name="email"
            value={formData.email}
            onChange={handleChange}
            required
          />
        </div>

        <div>
          <label htmlFor="password">Password:</label>
          <input
            type="password"
            id="password"
            name="password"
            value={formData.password}
            onChange={handleChange}
            required
          />
        </div>

        <div>
          <button type="submit">Submit</button>
        </div>
      </form>

      <h3>Entered Data:</h3>
      <pre>{JSON.stringify(formData, null, 2)}</pre>
    </div>
  );
};

export default SignupForm;
