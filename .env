JWT_TOKEN="ajbdjasbdjasbdjasdbjadb"

create database db;
use db;
create table user ( id int);
create table SignUpTable(
id INT AUTO_INCREMENT PRIMARY KEY,
name varchar(255),
pass varchar(255),
email varchar(255)
);
ALTER TABLE SignUpTable
ADD role ENUM('admin', 'student') NOT NULL DEFAULT 'student';

DESCRIBE SignUpTable;
SELECT * FROM SignUpTable;

npm run dev
npm start
npx create-react-app


# 1. Login to MySQL
# Use this command to log in to MySQL as the root user. You'll be prompted to enter your password.
mysql -u root -p

# 2. Show Databases
# This command lists all the databases available in the MySQL server.
SHOW DATABASES;

# 3. Create a Database
# Creates a new database with the specified name.
CREATE DATABASE database_name;

# 4. Use a Database
# Switches to a specific database to begin working with it.
USE database_name;

# 5. Show Tables
# Lists all the tables in the current database.
SHOW TABLES;

# 6. Create a Table
# Creates a new table with specified columns and their data types.
CREATE TABLE table_name (
    column1 datatype,
    column2 datatype,
    column3 datatype
);

# 7. Show Table Structure
# Displays the structure of a specified table (columns, data types, etc.).
DESCRIBE table_name;

# 8. Insert Data into a Table
# Inserts a row of data into a table.
INSERT INTO table_name (column1, column2, column3)
VALUES ('value1', 'value2', 'value3');

# 9. Select Data from a Table
# Selects and displays all data from a table.
SELECT * FROM table_name;

# 10. Select Specific Columns from a Table
# Selects and displays specific columns from a table.
SELECT column1, column2 FROM table_name;

# 11. Filter Data with a Condition
# Selects rows based on a condition.
SELECT * FROM table_name WHERE column1 = 'value';

# 12. Update Data in a Table
# Updates data in a table where a specific condition is met.
UPDATE table_name
SET column1 = 'new_value', column2 = 'new_value'
WHERE condition;

# 13. Delete Specific Rows from a Table
# Deletes rows that meet the specified condition.
DELETE FROM table_name WHERE condition;

# 14. Delete All Rows from a Table
# Deletes all rows from the specified table (does not remove the table itself).
DELETE FROM table_name;

# 15. Drop a Table (Delete Table)
# Deletes a table entirely from the database.
DROP TABLE table_name;

# 16. Drop a Database (Delete Database)
# Deletes a database entirely from the server.
DROP DATABASE database_name;

# 17. Create a User
# Creates a new user with a specified username and password.
CREATE USER 'username'@'host' IDENTIFIED BY 'password';

# 18. Grant Permissions to a User
# Grants all privileges (permissions) to a user on a specific database.
GRANT ALL PRIVILEGES ON database_name.* TO 'username'@'host';

# 19. Grant Specific Permissions to a User
# Grants specific permissions (e.g., SELECT, INSERT, UPDATE) to a user.
GRANT SELECT, INSERT, UPDATE ON database_name.* TO 'username'@'host';

# 20. Flush Privileges (Reload Privileges)
# Reloads the privileges, ensuring that changes made to users or permissions are applied.
FLUSH PRIVILEGES;

# 21. Show User Privileges
# Displays the permissions and privileges granted to a specific user.
SHOW GRANTS FOR 'username'@'host';

# 22. Change User Password
# Changes the password for a specific user.
ALTER USER 'username'@'host' IDENTIFIED BY 'new_password';

# 23. Drop a User (Delete User)
# Deletes a user from the MySQL server.
DROP USER 'username'@'host';

# 24. Show Running Processes
# Displays a list of currently running MySQL processes and queries.
SHOW PROCESSLIST;

# 25. Exit MySQL
# Exits the MySQL command line client.
EXIT;

# 26. Backup a Database (Command Line)
# Backs up the database to a .sql file, which can be used to restore it later.
mysqldump -u root -p database_name > backup.sql

# 27. Restore a Database from Backup
# Restores a database from a .sql backup file.
mysql -u root -p database_name < backup.sql

# 28. Show MySQL Version
# Displays the version of the MySQL server.
SELECT VERSION();

# 29. Check a Table for Errors
# Checks for errors in a table structure.
CHECK TABLE table_name;

# 30. Repair a Table
# Repairs a table if it's corrupted or has issues.
REPAIR TABLE table_name;


import React, { useState } from 'react';

const SignupForm = () => {
  // useState to store form data
  const [formData, setFormData] = useState({
    name: '',
    email: '',
    password: ''
  });

  // Handle input change
  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData(prevData => ({
      ...prevData,
      [name]: value
    }));
  };

  // Handle form submission
  const handleSubmit = (e) => {
    e.preventDefault();
    // Here you can handle further actions like sending the data to the backend
    console.log('Form Data Submitted:', formData);
  };

  return (
    <div>
      <h2>Signup Form</h2>
      <form onSubmit={handleSubmit}>
        <div>
          <label htmlFor="name">Name:</label>
          <input
            type="text"
            id="name"
            name="name"
            value={formData.name}
            onChange={handleChange}
            required
          />
        </div>

        <div>
          <label htmlFor="email">Email:</label>
          <input
            type="email"
            id="email"
            name="email"
            value={formData.email}
            onChange={handleChange}
            required
          />
        </div>

        <div>
          <label htmlFor="password">Password:</label>
          <input
            type="password"
            id="password"
            name="password"
            value={formData.password}
            onChange={handleChange}
            required
          />
        </div>

        <div>
          <button type="submit">Submit</button>
        </div>
      </form>

      <h3>Entered Data:</h3>
      <pre>{JSON.stringify(formData, null, 2)}</pre>
    </div>
  );
};

export default SignupForm;



---------------------------app.js
import React from 'react';
import { BrowserRouter as Router, Route, Routes, Link } from 'react-router-dom';
import './App.css';
import Home from './pages/Home';
import Login from './pages/Login';
import Signup from './pages/Signup';

function App() {
  return (
    <Router>
      <div className="App">
        <header className="App-header">
          <nav>
            <ul>
              <li>
                <Link to="/">Home</Link>
              </li>
              <li>
                <Link to="/login">Login</Link>
              </li>
              <li>
                <Link to="/signup">Signup</Link>
              </li>
            </ul>
          </nav>

          <Routes>
            <Route path="/" element={<Home />} />
            <Route path="/login" element={<Login />} />
            <Route path="/signup" element={<Signup />} />
          </Routes>
        </header>
      </div>
    </Router>
  );
}

export default App;

----------------------------------index.js
const express = require('express');
const app = express();
const db = require('./config/db'); // Import the db.js file for database connection
const cors = require('cors');
const dotenv = require('dotenv');
const route = require('./routes/router'); // Assuming this file exists and is configured properly

dotenv.config(); // Load environment variables

// Middleware
app.use(express.json()); // For parsing JSON request bodies
app.use(cors({
    credentials: true,
    origin: true // Allowing all origins; customize as needed
}));

// Route to fetch all users from the "user" table
app.get('/users', (req, res) => {
    const sql = "SELECT * FROM user"; // Ensure the "user" table exists in your database
    db.query(sql, (err, results) => {
        if (err) {
            return res.status(500).json({ error: err.message }); // Return error message if query fails
        }
        res.json(results); // Send the query results as a JSON response
    });
});

// Add other routes
app.use("/api/v1", route); // Assuming this is where your API routes are handled

// Start the server
const port = process.env.PORT || 5000; // Use the port from environment variables or default to 3000
app.listen(port, () => {
    console.log(`Server is running on port ${port}`);
});




----------------------router
const express=require("express");
const signup = require("../controller/SignUp");
const logIn = require("../controller/LogIn");
const router=express.Router();

router.post("/singup",signup);

router.post("/login",logIn);

module.exports = router;



-----------------------------------------------auth.js
const jwt = require("jsonwebtoken");

// Middleware to authenticate JWT token
const authToken = async (req, res, next) => {
  try {
    // Retrieve token from cookies or Authorization header
    const token = req.cookies?.deepaknediya || req.headers['authorization']?.split(' ')[1];
    
    // console.log("Token is here: ", token);

    if (!token) {
      // If no token is provided, respond with unauthorized status
      return res.status(401).json({
        success: false,
        message: "Token is not provided"
      });
    }

    // Verify the token
    jwt.verify(token, process.env.JWT_TOKEN, (err, decoded) => {
      if (err) {
        console.log("Token verification error: ", err);
        return res.status(401).json({
          success: false,
          message: "Invalid Token"
        });
      }

      // Attach decoded token data to req.user
      req.user = decoded;
      next();
    });
  } catch (err) {
    // Catch any unexpected errors and respond with unauthorized status
    console.error("Auth Error: ", err);
    return res.status(401).json({
      success: false,
      message: "Authentication failed"
    });
  }
};

module.exports = authToken;


---------------------------------------------------controller
const connection = require("../config/db");
const jwt = require('jsonwebtoken'); // Import jwt module
require("dotenv").config();

const logIn = async (req, res) => {
    try {
        // Destructure the data from req.body
        const { email, pass, role } = req.body;

        // SQL query to check if the user exists with the provided email, password, and role
        const sql = "SELECT * FROM SignUpTable WHERE email = ? AND pass = ? AND role = ?";

        // Execute the query with the values
        connection.query(sql, [email, pass, role], (err, result) => {
            if (err) {
                // If there's an error during the query execution
                return res.status(500).json({
                    message: "An error occurred during login",
                    success: false,
                    error: err.message
                });
            }

            if (result.length > 0) {
                // If a matching user is found
                const user = result[0]; // Get the first matching user

                // Create JWT payload including the user's role and id
                const payload = {
                    email: user.email,
                    id: user.id, // Assuming `id` is used to identify the user in your database
                    role: user.role // Include the role in the payload
                };

                // Sign the JWT with a secret key and an expiration time (e.g., 30 days)
                const token = jwt.sign(payload, process.env.JWT_TOKEN, { expiresIn: "30d" });

                // Set the token as a cookie and respond with success
                res.cookie("token", token, { httpOnly: true, secure: process.env.NODE_ENV === 'production' }).status(200).json({
                    success: true,
                    message: "Login Successful",
                    token: token, // Include the token in the response body
                    role: user.role, // Optionally include role in response
                    error: false,
                });
            } else {
                // If no matching user is found
                return res.status(401).json({
                    message: "Invalid email, password, or role",
                    success: false
                });
            }
        });

    } catch (err) {
        // Catch and return any unexpected errors
        return res.status(500).json({
            message: "Error during login",
            error: err.message,
            success: false,
        });
    }
};

module.exports = logIn;


// controller/SignUp.js
const connection = require('../config/db');  // Import the correct connection object

const signup = async (req, res) => {
    try {
        const { name, pass, email, role } = req.body;  // Destructure the data from req.body

        // Use parameterized queries to prevent SQL injection
        var sql = "INSERT INTO SignUpTable (name, pass, email, role) VALUES (?, ?, ?, ?)";

        // Use connection.query instead of db.query
        connection.query(sql, [name, pass, email, role], function (err, result) {
            if (err) throw err;
            console.log("1 record inserted");
            return res.status(200).json({
                message: "User signed up successfully",
                success: true,
            });
        });
    } catch (err) {
        return res.status(500).json({
            message: "An error occurred",
            success: false,
            error: err.message,
        });
    }
};

module.exports = signup;


---------------------------------------db.js

const mysql = require('mysql2');

// Create a connection to the database
const connection = mysql.createConnection({
  host: 'localhost',    // Replace with your database host
  user: 'root',         // Replace with your MySQL username
  password:"pass123", // Replace with your MySQL password
  database: "db" // Replace with your database name
});

// Connect to MySQL
connection.connect((err) => {
  if (err) {
    console.error('Error connecting to MySQL:', err.stack);
    return;
  }
  console.log('Connected to MySQL as id ' + connection.threadId);
});

module.exports = connection;


const express = require('express');
const mysql = require('mysql2');
const bodyParser = require('body-parser');

// Create an instance of express
const app = express();

// Middleware to parse JSON bodies
app.use(bodyParser.json());

// Create a MySQL database connection
const db = mysql.createConnection({
  host: 'localhost',      // your MySQL host
  user: 'root',           // your MySQL username
  password: '',           // your MySQL password
  database: 'test_db'     // your MySQL database name
});

// Connect to MySQL
db.connect(err => {
  if (err) {
    console.error('Error connecting to MySQL:', err);
    return;
  }
  console.log('Connected to MySQL');
});

// Example model (a simple "users" table)
const tableName = 'users'; // Change this to your table

// Step 3: CRUD Operations

// 1. Create Operation - Add a new user
app.post('/add-user', (req, res) => {
  const { name, email } = req.body;  // Get data from the body of the request

  const query = `INSERT INTO ${tableName} (name, email) VALUES (?, ?)`;

  db.query(query, [name, email], (err, result) => {
    if (err) {
      return res.status(500).json({ message: 'Error adding user', error: err });
    }
    res.status(201).json({ message: 'User added successfully', id: result.insertId });
  });
});

// 2. Read Operation - Get all users
app.get('/get-users', (req, res) => {
  const query = `SELECT * FROM ${tableName}`;

  db.query(query, (err, results) => {
    if (err) {
      return res.status(500).json({ message: 'Error retrieving users', error: err });
    }
    res.status(200).json({ users: results });
  });
});

// 3. Update Operation - Update a user by id
app.put('/update-user/:id', (req, res) => {
  const { id } = req.params;  // Get user id from the URL
  const { name, email } = req.body;  // Get updated data from the body

  const query = `UPDATE ${tableName} SET name = ?, email = ? WHERE id = ?`;

  db.query(query, [name, email, id], (err, result) => {
    if (err) {
      return res.status(500).json({ message: 'Error updating user', error: err });
    }
    if (result.affectedRows === 0) {
      return res.status(404).json({ message: 'User not found' });
    }
    res.status(200).json({ message: 'User updated successfully' });
  });
});

// 4. Delete Operation - Delete a user by id
app.delete('/delete-user/:id', (req, res) => {
  const { id } = req.params;  // Get user id from the URL

  const query = `DELETE FROM ${tableName} WHERE id = ?`;

  db.query(query, [id], (err, result) => {
    if (err) {
      return res.status(500).json({ message: 'Error deleting user', error: err });
    }
    if (result.affectedRows === 0) {
      return res.status(404).json({ message: 'User not found' });
    }
    res.status(200).json({ message: 'User deleted successfully' });
  });
});

// Start the server
const port = 5000;
app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});


const express = require('express');
const mysql = require('mysql2');
const bodyParser = require('body-parser');

// Create an instance of express
const app = express();

// Middleware to parse JSON bodies
app.use(bodyParser.json());

// Create a MySQL database connection
const db = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: '',
  database: 'test_db'  // your MySQL database name
});

// Connect to MySQL
db.connect(err => {
  if (err) {
    console.error('Error connecting to MySQL:', err);
    return;
  }
  console.log('Connected to MySQL');
});

// Example model (a simple "users" table)
const tableName = 'users';

// 1. Create Operation - Add a new user
app.post('/add-user', (req, res) => {
  const { name, email } = req.body;

  const query = `INSERT INTO ${tableName} (name, email) VALUES (?, ?)`;

  db.query(query, [name, email], (err, result) => {
    if (err) {
      return res.status(500).json({ message: 'Error adding user', error: err });
    }
    res.status(201).json({ message: 'User added successfully', id: result.insertId });
  });
});

// 2. Read Operation - Get all users
app.get('/get-users', (req, res) => {
  const query = `SELECT * FROM ${tableName}`;

  db.query(query, (err, results) => {
    if (err) {
      return res.status(500).json({ message: 'Error retrieving users', error: err });
    }
    res.status(200).json({ users: results });
  });
});

// 3. Get User by ID - Get a single user by ID
app.get('/get-user/:id', (req, res) => {
  const { id } = req.params;

  const query = `SELECT * FROM ${tableName} WHERE id = ?`;

  db.query(query, [id], (err, result) => {
    if (err) {
      return res.status(500).json({ message: 'Error retrieving user', error: err });
    }
    if (result.length === 0) {
      return res.status(404).json({ message: 'User not found' });
    }
    res.status(200).json({ user: result[0] });
  });
});

// 4. Update Operation - Update a user by id
app.put('/update-user/:id', (req, res) => {
  const { id } = req.params;
  const { name, email } = req.body;

  const query = `UPDATE ${tableName} SET name = ?, email = ? WHERE id = ?`;

  db.query(query, [name, email, id], (err, result) => {
    if (err) {
      return res.status(500).json({ message: 'Error updating user', error: err });
    }
    if (result.affectedRows === 0) {
      return res.status(404).json({ message: 'User not found' });
    }
    res.status(200).json({ message: 'User updated successfully' });
  });
});

// 5. Delete Operation - Delete a user by id
app.delete('/delete-user/:id', (req, res) => {
  const { id } = req.params;

  const query = `DELETE FROM ${tableName} WHERE id = ?`;

  db.query(query, [id], (err, result) => {
    if (err) {
      return res.status(500).json({ message: 'Error deleting user', error: err });
    }
    if (result.affectedRows === 0) {
      return res.status(404).json({ message: 'User not found' });
    }
    res.status(200).json({ message: 'User deleted successfully' });
  });
});

// Start the server
const port = 5000;
app.listen(port, () => {
  console.log(`Server running on port ${port}`);
});


 const submitForm = async (e) => {
    e.preventDefault();
    try {
      const fetchData = await fetch(summaryApi.login.url, {
        method:summaryApi.login.method,
        credentials: "include",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(loginData),
      });
      // Parse the JSON response
      const data = await fetchData.json();
      console.log(data);
      // Success case
      if (data.success === true) {
        toast.success("Login successful");
        localStorage.setItem('token', data.token);
        navigate("/admin");
      } else {
        // Error case
        toast.error(data.message || "Only admin can login on this page");
      }
    } catch (err) {
      // Network or unexpected error
      toast.error("An error occurred during login. Please try again.");
      console.error("Login error:", err);
    }
  };
